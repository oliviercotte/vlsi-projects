----------------------------------------------------------------------------------------------------
-- TITLE:         RAM
-- DESCRIPTION:   RAM with test program for 8-bit stack-based processor.
-- GENERATED BY:  assembler.tcl with 'fibo.asm' as input
----------------------------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.opcodes.all;

architecture fibo of ram is
	type mem_t  is array(integer range <>) of std_logic_vector(7 downto 0);

	constant USEFUL_BITS: natural := 12;
	constant ZERO: std_logic_vector(16-USEFUL_BITS-1 downto 0) := (others=>'0');
	constant WORDS: natural := 38;

	signal   for_me:  std_logic;
	signal   mem:     mem_t(0 to 2**USEFUL_BITS - 1);

	constant program: mem_t(0 to WORDS - 1) := (
		OP_CONST_W, -- 0x0000
		STD_LOGIC_VECTOR( TO_UNSIGNED(255, 8) ),
		STD_LOGIC_VECTOR( TO_UNSIGNED(1, 8) ),
		OP_W_TO_SP, -- 0x0003
		OP_CONST_W, -- 0x0004
		STD_LOGIC_VECTOR( TO_UNSIGNED(0, 8) ),
		STD_LOGIC_VECTOR( TO_UNSIGNED(2, 8) ),
		OP_W_TO_BP, -- 0x0007
		OP_CONST, -- 0x0008
		STD_LOGIC_VECTOR( TO_SIGNED(0, 8) ),
		OP_CONST, -- 0x000a
		STD_LOGIC_VECTOR( TO_SIGNED(1, 8) ),
		OP_CONST, -- 0x000c
		STD_LOGIC_VECTOR( TO_SIGNED(12, 8) ),
		OP_PUT, -- 0x000e
		STD_LOGIC_VECTOR( TO_SIGNED(13, 8) ),
		OP_POP_WH, -- 0x0010
		OP_POP_WL, -- 0x0011
		OP_PUSH_WL, -- 0x0012
		OP_PUSH_WH, -- 0x0013
		OP_PUSH_WL, -- 0x0014
		OP_PUSH_WH, -- 0x0015
		OP_ADD, -- 0x0016
		OP_CONST, -- 0x0017
		STD_LOGIC_VECTOR( TO_SIGNED(1, 8) ),
		OP_GET, -- 0x0019
		STD_LOGIC_VECTOR( TO_SIGNED(13, 8) ),
		OP_SUB, -- 0x001b
		OP_PUT, -- 0x001c
		STD_LOGIC_VECTOR( TO_SIGNED(13, 8) ),
		OP_BNE, -- 0x001e
		STD_LOGIC_VECTOR( TO_SIGNED(-16, 8) ),
		OP_JMP, -- 0x0020
		STD_LOGIC_VECTOR( TO_SIGNED(-2, 8) ),
		OP_NOP, OP_NOP,
		OP_JMP,
		STD_LOGIC_VECTOR( TO_SIGNED(0, 8) ) );

begin

	for_me <= '1' when in_addr(15 downto USEFUL_BITS) = ZERO else '0';

	process(clk, rst_n)
		variable uidx: unsigned(USEFUL_BITS-1 downto 0);
	begin
		if rst_n = '0' then
			for idx in 0 to WORDS - 1 loop
				mem(idx)   <= program(idx);
			end loop;
			for idx in WORDS to mem'HIGH loop
				mem(idx) <= x"ff";
			end loop;
		elsif clk'event and clk = '1' then
			if in_wr = '1' and for_me = '1' then
				uidx := UNSIGNED( in_addr(USEFUL_BITS-1 downto 0) );
				mem( TO_INTEGER(  uidx ) ) <= io_data;
			end if;
		end if;
	end process;

	process(in_addr, mem, for_me, in_rd)
		variable uidx: unsigned(USEFUL_BITS-1 downto 0);
	begin
		if in_rd = '1' and for_me = '1' then
			uidx := UNSIGNED( in_addr(USEFUL_BITS-1 downto 0) );
			io_data <= mem( TO_INTEGER(  uidx  ) );
		else
			io_data <= (others => 'Z');
		end if;
	end process;
end fibo;
